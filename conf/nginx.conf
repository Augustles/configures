# worker_processes 设置进程数
# worker_rlimit_nofile 设置最大打开文件数
# worker_connections 设置worker最大连接数
# keepalive 超时时间设置
# gzip压缩设置
# open_file_cache缓存设置
# 日志设置, access如果没用可以关闭
# 静态文件缓存

#user  nobody; # 指定nginx运行的用户和用户组，默认nobody
worker_processes  auto; # 设置nginx进程数,这里配置为auto
worker_rlimit_nofile 65535; # 设置worker进程最大打开文件数

# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

#pid        logs/nginx.pid;


# 网络连接的优化
events {
    worker_connections  2048; # 设置最大连接数ulimit -n
    accept_mutex on; # 防止休眠状态下一个请求访问多个进程被唤醒的尴尬
    multi_accept on; # 打开同时接受多个新网络请求的功能
    # use epoll; # linux使用epoll事件驱动,freebsd推荐kquque
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log off; # 关闭access日志
    error_log  logs/error.log  crit; # 只记录严重错误信息

    server_tokens off; # 隐藏nginx版本号

    sendfile       on; # 开启高效文件传输模式
    tcp_nopush     on; # 告诉nginx在一个数据包发送所有的头文件
    tcp_nodelay    on; # 不要缓存数据

    # 客户端keepalive超时时间
    keepalive_timeout  65; # 设置客户端连接保存活动的超时时间
    client_header_timeout 10; # 用于设置客户端请求读取超时时间
    client_body_timeout 10; # 用于设置客户端请求主体读取超时时间
    reset_timedout_connection on; # 关闭不响应的客户端连接
    send_timeout 10; # 用于设置相应客户端的超时时间

    # httpGip 模块设置
    gzip  on; # 开启gzip压缩
    gzip_disable "msie6"; # ie6以下禁用gzip
    gzip_min_length 1000; # 针对大于1000文本进行压缩
    gzip_buffers 4 16k; # 申请4个单位为16K的内存作为压缩结果流缓存
    gzip_http_version 1.1; # 设置识别http协议的版本,默认是1.1
    gzip_comp_level 5; # 指定gzip压缩比,1-9 数字越小,压缩比越小,速度越快.
    gzip_types text/plain text/css application/javascript text/javascript application/x-javascript text/xml application/xml application/xml+rss application/json image/x-icon image/png image/jpg image/jpeg application/font-woff; # 指定压缩的类型
    gzip_vary on; # 避免浪费不支持的也压缩，前端的缓存服务器存经过gzip压缩的页面

    # 静态文件缓存
    open_file_cache max=2000 inactive=20s; # 打开文件缓存, 设定最大缓存数目,以及缓存时间
    open_file_cache_valid    60s; # 指定检测信息的时间间隔
    open_file_cache_min_uses   3; # 定义了open_file_cache中指令参数不活动时间期间里最小的文件数
    open_file_cache_errors   off; # 指定了当搜索一个文件时是否缓存错误信息

    # server主机设置
    server { # 配置一个站点
        listen       8080; # 监听端口8080
        server_name  localhost; # 设置主机域名
        rewrite ^(.*) http://localhost$1 permanent; # 重定向

        charset UTF-8; # 设置访问语言编码

        #access_log  logs/host.access.log  main;

        #location # url路由匹配设置
        location / { # 设置虚拟主机的基本信息
            root   html; # 设置虚拟主机的网站根目录
            index  index.html index.htm; # index模块，设置虚拟主机默认访问的网页
           #include uwsgi_params; # load uwsgi
           #uwsgi_pass 127.0.0.1:9090;

        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # 访问ip控制
        location /admin/ {
        allow 192.168.1.1; # 允许ip通过，allow放置在前面
        deny all; # 禁止其他ip
        }

        # 客户端缓存
        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
         access_log        off;
         log_not_found     off;
         expires           30d;
        }
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
